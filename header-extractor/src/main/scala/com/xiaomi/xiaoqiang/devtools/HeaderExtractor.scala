package com.xiaomi.xiaoqiang.devtools

import java.io.{FileOutputStream, File}
import java.util.Date
import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat

object HeaderExtractor extends App {

  case class Config(inputDir: String = "", outputDir: String = "")

  val parser = new scopt.immutable.OptionParser[Config]("header-extractor", "0.1-SNAPSHOT") {
    def options = Seq(
      arg("input", "Input directory of headers.") {
        (v: String, c: Config) => c.copy(inputDir = v)
      },
      arg("output", "Output directory of headers.") {
        (v: String, c: Config) => c.copy(outputDir = v)
      }
    )
  }

  parser.parse(args, Config()) map {
    config => {
      val inputDir = new File(config.inputDir).getAbsoluteFile
      val outputDir = new File(config.outputDir).getAbsoluteFile
      val rootDir = findBladeRoot(inputDir);
      if (!inputDir.exists) {
        println("Input " + inputDir + " does not exist.")
      } else if (!inputDir.isDirectory) {
        println("Input " + inputDir + " is not a directory.")
      } else if (outputDir.exists) {
        println("Output " + outputDir + " already exists.")
      } else if (null == rootDir) {
        println("Can't find BLADE_ROOT.")
      } else {
        translate(inputDir, outputDir, rootDir)
      }
    }
  }

  def translate(inputDir: File, outputDir: File, rootDir: File) {
    if (outputDir.mkdirs()) {
      inputDir.listFiles.foreach(f => {
        val outFile = new File(outputDir, f.getName)
        if (f.isDirectory) {
          translate(f, outFile, rootDir)
        } else if (isHeader(f.getName)) {
          if (outFile.createNewFile()) {
            val include = f.getAbsolutePath.replace(rootDir.getAbsolutePath, "").substring(1)
            val fileOutputStream = new FileOutputStream(outFile)
            fileOutputStream.write(header(include).getBytes(StandardCharsets.UTF_8))
            fileOutputStream.flush
            fileOutputStream.close
          } else {
            println("Can't create file " + outFile + ".")
          }
        }
      })
    } else {
      println("Can't create output " + outputDir + ".")
    }

  }

  def isHeader(fileName: String) = {
    (null != fileName) && {
      fileName.endsWith(".h") || fileName.endsWith(".hh") || fileName.endsWith(".hpp")
    }
  }

  def header(include: String) =
    """
      |// Generated by HeaderExtractor.
      |// Copyright %s Huahang Liu.
      |// All rights reserved.
      |
      |#pragma once
      |
      |#include "%s"""".stripMargin.format(new SimpleDateFormat("YYYY").format(new Date()), include) + "\n"


  def findBladeRoot(dir: File): File = {
    val bladeRootFile = new File(dir.getAbsoluteFile, "BLADE_ROOT")
    val parentFile = dir.getParentFile.getAbsoluteFile
    if (bladeRootFile.exists && bladeRootFile.isFile) {
      dir.getAbsoluteFile
    } else if (null != parentFile && parentFile.exists()) {
      findBladeRoot(parentFile)
    } else {
      null
    }
  }

}
